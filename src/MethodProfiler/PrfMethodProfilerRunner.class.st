Class {
	#name : 'PrfMethodProfilerRunner',
	#superclass : 'Object',
	#instVars : [
		'intercepters',
		'profilingNow',
		'callStack',
		'result',
		'methodIntercepterClass'
	],
	#category : 'MethodProfiler-Core',
	#package : 'MethodProfiler',
	#tag : 'Core'
}

{ #category : 'instance creation' }
PrfMethodProfilerRunner class >> newForMethods: aSetOfMethods [

	^ self new
		  methods: aSetOfMethods;
		  yourself
]

{ #category : 'instance creation' }
PrfMethodProfilerRunner class >> newRWIForMethods: aSetOfMethods [

	^ self new
		methodIntercepterClass: PrfRWIMethodIntercepter;
		methods: aSetOfMethods;
		yourself
]

{ #category : 'initialization' }
PrfMethodProfilerRunner >> destroy [

	intercepters do: [ :intercepter | intercepter uninstall ].
	intercepters removeAll.
	result := nil.
]

{ #category : 'method flow' }
PrfMethodProfilerRunner >> enterMethod: aMethod [

	| node precedingNode |
	callStack ensureStackIsInitialized.
	precedingNode := callStack top.
	node := result
		        nodeForMethod: aMethod
		        withPrecedingNode: precedingNode.
	precedingNode addCallTo: node.
	node addCall.
	callStack push: node.
	node enteringNode
]

{ #category : 'method flow' }
PrfMethodProfilerRunner >> exitMethod: aMethod [

	callStack pop exitingNode
]

{ #category : 'initialization' }
PrfMethodProfilerRunner >> initialize [

	result := PrfMethodProfilerResult new.
	callStack := PrfProcessCallStack newWithRunner: self.
	intercepters := Dictionary new.
	profilingNow := false.
	methodIntercepterClass := PrfMethodIntercepter
]

{ #category : 'accessing' }
PrfMethodProfilerRunner >> isProfilingNow [

	^ profilingNow
]

{ #category : 'adding' }
PrfMethodProfilerRunner >> methodIntercepterClass: aClass [

	methodIntercepterClass := aClass
]

{ #category : 'adding' }
PrfMethodProfilerRunner >> methods: aSetOfMethods [

	(aSetOfMethods collect: [ :method | method unproxifiedMethod ]) do: [ :method |
		intercepters
			at: method
			put: (methodIntercepterClass newForMethod: method withRunner: self) ].
	result methods: aSetOfMethods
]

{ #category : 'lifecycle' }
PrfMethodProfilerRunner >> profile: aBlock [
	
	result mainProcess: thisProcess.
	self start.
	aBlock ensure: [ self stop ].
	result buildCallGraph.
	^ result
]

{ #category : 'initialization' }
PrfMethodProfilerRunner >> reset [ 
	result := PrfMethodProfilerResult new.
]

{ #category : 'accessing' }
PrfMethodProfilerRunner >> result [

	^ result
]

{ #category : 'lifecycle' }
PrfMethodProfilerRunner >> start [
	intercepters do: [ :intercepter | intercepter install ].
	result rootNode enteringNode.
	profilingNow := true
]

{ #category : 'lifecycle' }
PrfMethodProfilerRunner >> stop [

	result rootNode exitingNode.
	intercepters do: [ :intercepter | intercepter uninstall ].
	profilingNow := false
]
